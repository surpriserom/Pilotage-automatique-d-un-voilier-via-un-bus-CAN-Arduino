#
# Author : Rishi Gupta
# 
# This file is part of 'serial communication manager' library.
#
# The 'serial communication manager' is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# The 'serial communication manager' is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with serial communication manager. If not, see <http://www.gnu.org/licenses/>.
#################################################################################################

# These are udev rules that can be used based on system and application design requirement. The
# rules written in /lib/udev/rules.d gets overidden by rules in /etc/udev/rules.d directory. Also
# if for the same device/node more rules are defined at more than one place or file, pay attention
# to the order in which they are applied as they may have side effects.


### Create symlink
##################

# When a USB-UART matching VID, PID and serial number is added to the system create a symlink to it.
# This will save time to find the device node assigned to the device.

SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="A7036479", SYMLINK+="scm_custom_link"


### Create symlink based on physical location of USB device in tree
###################################################################

# If a USB device is connected at 3rd port of 3rd embedded root hub in system, for its 1st configuration
# and interaface 0, create a symlink to it. For example connecting a FT232 will create a symlink
# scm_location_link -> ttyUSB0 in /dev directory.

SUBSYSTEMS=="usb", KERNELS=="3-3:1.0", SYMLINK+="scm_location_link"


### Remove default driver
#########################

# By default when a USB-UART like CP2102 is inserted into system default kernel VCP drivers will be
# loaded to driver the device. However if we want to remove these drivers and drive the device from
# user space driver, this rule should remove kernel driver automatically.

SUBSYSTEM=="usb", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60", ATTRS{serial}=="0001", RUN+="/bin/sh -c 'echo 1 >/sys$DEVPATH/remove'"


## Power management of USB device
#################################

# By deafult Linux kernel does not enable auto suspend of USB devices. If the USB-UART converter 
# supports auto suspend then the devices can be suspended automatically when no process is using it.
# cat /sys/bus/usb/drivers/usb/3-3/power/runtime_status will show active or suspended depending
# upon power status of USB device.

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60", ATTRS{serial}=="0001", TEST=="power/control", ATTR{power/control}="auto"


### Set latency timer for FTDI USB-UART chips
#############################################

# For high speed I/O Low latency is required. For FTDI FT232RL this can be set via sysfs entry.
# Note default built-in drivers does not allow to change this timer value. Driver provided by FTDI
# at their website need to be used for changing FTDI specific parameters.

SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="A7036479", PROGRAM="/home/a/udev-ftdi-latency-timer.sh %p"


### Run an external program
###########################

# Run an external program (.jar, shell script, executable binary etc.) when a USB-UART matching VID, 
# PID and serial number is added to the system. This program may be runned as root user. The PROGRAM
# is used when the external program is used for creating device node name only. Till this time no device
# node is created.

SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="A7036479", PROGRAM="/home/a/test.sh"


### Unload default driver for USB CDC interface
###########################

# This rule will unload default ftdi_sio driver for FTDI CDC interface with the help of a shell script.
# Note all the device which requires this driver will now need a driver to operate.

ACTION=="add", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_interface", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", PROGRAM="/home/a/udev-ftdi-unload-vcp-driver.sh"


### Unbind default driver from USB CDC interface
###########################

# This rule will unbind default ftdi_sio driver for FTDI CDC interface with the help of a shell script.

ACTION=="add", SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_interface", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", PROGRAM="/home/a/udev-ftdi-unbind-ftdi_sio.sh %p"


### Run an external program with parameters
###########################################

# Run an external program which will take kernel device name as argument, does some processing and 
# return its output via stdout. This output from stdout is then used to create a symlink.

SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="A7036479", PROGRAM="/home/a/test.jar %k" SYMLINK+="%c"


### Serial over ethernet or port servers
########################################

# To run server service only when the client sends a socket request use systemd TAG. This is what 
# port server uses. This has wide possibilities and detailed documentation should be consulted.
# For example when a virtual serial port over ethrenet is created, the daemon (TCP server) can bind
# to client and device node created and may act as medium between driver and remote client. 

KERNEL=="tty_custom_name*", PROGRAM="/usr/bin/custom_daemon %k", SYMLINK+="%c", TAG="systemd"


### Create a device node based on usb device attributes
#######################################################

# Apart from default node, create a device node in /dev directory. The created device node will be
# /dev/custom_name and is like persistent name for this device.

SUBSYSTEM=="tty", ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ATTRS{serial}=="A7036479", NAME="custom_name"

