/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge */

#ifndef _Included_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
#define _Included_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getNumDevices
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getNumDevices
  (JNIEnv *, jobject);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getProductString
 * Signature: (II)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getProductString
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    open
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_open
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    close
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_close
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    read
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_read
  (JNIEnv *, jobject, jlong, jbyteArray, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    write
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_write
  (JNIEnv *, jobject, jlong, jbyteArray, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    cancelIO
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_cancelIO
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    flushBuffer
 * Signature: (JBB)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_flushBuffer
  (JNIEnv *, jobject, jlong, jbyte, jbyte);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    setTimeouts
 * Signature: (JJJ)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_setTimeouts
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getTimeouts
 * Signature: ()[J
 */
JNIEXPORT jlongArray JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getTimeouts
  (JNIEnv *, jobject);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    checkRXQueue
 * Signature: ()[J
 */
JNIEXPORT jlongArray JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_checkRXQueue
  (JNIEnv *, jobject);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    setBaudRate
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_setBaudRate
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    setLineControl
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_setLineControl
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    setFlowControl
 * Signature: (JIIIIII)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_setFlowControl
  (JNIEnv *, jobject, jlong, jint, jint, jint, jint, jint, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getModemStatus
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getModemStatus
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    setBreak
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_setBreak
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    readLatch
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_readLatch
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    writeLatch
 * Signature: (JJJ)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_writeLatch
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getPartNumber
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getPartNumber
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getDllVersion
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getDllVersion
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    getDriverVersion
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_getDriverVersion
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge
 * Method:    deviceIOControl
 * Signature: (JI[BI[BI)I
 */
JNIEXPORT jint JNICALL Java_com_embeddedunveiled_serial_internal_SerialComSLabsUSBXpressJNIBridge_deviceIOControl
  (JNIEnv *, jobject, jlong, jint, jbyteArray, jint, jbyteArray, jint);

#ifdef __cplusplus
}
#endif
#endif
